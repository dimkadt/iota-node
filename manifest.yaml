type: install
version: 1.4

id: iota
name: IOTA Node
baseUrl: https://raw.githubusercontent.com/jelastic-jps/iota-node/main
logo: images/iota-logo-white.svg?sanitize=true

homepage: https://www.iota.org/
description:
  short: IOTA’s Tangle is an open, feeless and scalable distributed ledger.
  text: |
    IOTA’s Tangle is an open, feeless and scalable distributed ledger, designed to support frictionless data and value transfer.

globals:
  user: admin
  password: ${fn.password}
  salt: setcretsalt

nodes:
- cloudlets: 16
  nodeGroup: cp
  extip: true
  nodeType: dockerengine

onInstall:
  - runLEConpanion
  - setupNode
  - runNode


actions:
  setupNode:
    - cmd [cp]: |-
        git clone https://github.com/gohornet/hornet
        yum install -y jq
        cd hornet
        pHash=$(python -c "from hashlib import sha256; print sha256('${globals.password}' + '${globals.salt}').hexdigest();")
        [ -z $pHash ] && { echo "Could not generate hash" ;exit 1; };
        jq --arg PASSWORD "${pHash}" '.dashboard.basicAuth.enabled = true | .dashboard.basicAuth.username = "${globals.user}" | .dashboard.basicAuth.passwordHash = $PASSWORD | .dashboard.basicAuth.passwordSalt = "${globals.salt}"'   config.json > config.json.modifed
        [ -f "config.json.modifed" ] && mv config.json.modifed config.json
        mkdir -p mainnetdb snapshots/{mainnet,devnet,comnet}
        chown 39999:39999 -R snapshots mainnetdb
        sed -i '/network_mode/a \   \ restart: always' docker-compose.yml
        iptables -P INPUT ACCEPT
        iptables -P FORWARD ACCEPT
        service iptables save      

      user: root
  
  runLEConpanion:
    - cmd [cp]: |-
         mkdir -p /app
         wget ${baseUrl}/templates/nginx.tmpl -O /app/nginx.tmpl
         docker run --detach \
          --restart=always \
          --name nginx-proxy \
          --net=host \
          --volume certs:/etc/nginx/certs \
          --volume vhost:/etc/nginx/vhost.d \
          --volume html:/usr/share/nginx/html \
          --volume /app/nginx.tmpl:/app/nginx.tmpl:ro \
          --volume /var/run/docker.sock:/tmp/docker.sock:ro \
          jwilder/nginx-proxy
  
         docker run --detach \
          --restart=always \
          --name nginx-proxy-letsencrypt \
          --volumes-from nginx-proxy \
          --volume /var/run/docker.sock:/var/run/docker.sock:ro \
          --volume acme:/etc/acme.sh \
          --env "DEFAULT_EMAIL=ihorman@gmail.com" \
          --env "CERTS_UPDATE_INTERVAL=60" \
          jrcs/letsencrypt-nginx-proxy-companion
    
  
  runNode:
    - cmd [cp]: |-
        cd hornet
        docker run -d \
        --restart=always \
        -v $(pwd)/config.json:/app/config.json:ro \
        -v $(pwd)/peering.json:/app/peering.json \
        -v $(pwd)/mainnetdb:/app/mainnetdb \
        --env "VIRTUAL_HOST=${env.domain}" \
        --env "LETSENCRYPT_HOST=${env.domain}" \
        --env "VIRTUAL_PORT=8081" \
        --name hornet \
        --net=host gohornet/hornet:latest

        echo "Downloading data: "
        while true; do
            netstat -nlpt | grep -q 8081
            [ $? -eq 0 ] && break
            echo  -n "."
            sleep 1
        done
 
      user: root
      
success: |-
  **Dashboard**: [https://${env.domain}](https://${env.domain}/dashboard)  
  **Username** : ${globals.user}    
  **Password** : ${globals.password}  

